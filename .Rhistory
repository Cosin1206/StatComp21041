cat("\nMOS_lqo score：", value_t)
cat("\nPESQ_mos score：", mean(value))
cat("\nMOS_lqo score：", mean(value_t))
}
else{
print("Unrecognizid type of index")
}
}
SS("MOS_lqo",seq(1, 4.5, by=0.1))
kmeans_cluster = function(x, y, n, graphic = TRUE){
# Define distance function
distance = function(point1, point2){
return(((point1[1] - point2[1]) ^ 2 + (point1[2] - point2[2]) ^ 2)^ 0.5)
}
# Setup pointset
pointset = cbind(x,y)
for(it in 1:100){
# Starting position of two points
starting_points = matrix(data = rep(0, 2 * n), nrow = n, ncol = 2)
for(i in 1:n){
starting_points[i,] = c(quantile(x, (i-0.5)/n),quantile(y, (i-0.5)/n))
}
dist_mat = matrix(data = rep(0, dim(pointset)[1] * n), nrow = dim(pointset)[1], ncol = n)
for(i in 1:n){
dist_pi = vector()
for(j in 1:dim(pointset)[1]){
dist_pi = c(dist_pi, distance(pointset[j,], starting_points[i,]))
}
dist_mat[,i] = dist_pi
}
which_group = vector()
for(i in 1:dim(pointset)[1]){
which_group[i] = which.min(dist_mat[i,])
}
for(i in 1:n){
one_group = pointset[which_group == i,]
if(length(one_group) > 0){
starting_points[i,] = c(mean(one_group[,1]), mean(one_group[,2]))
}
}
}
plot(x, y, col = which_group + 1, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), pch = 16)
# Plot out centers
for(i in 1:n){
points(starting_points[i,1], starting_points[i,2], cex = 2.5, col = i + 1, pch = 8)
}
return(which_group)
}
kmeans_cluster(cars$dist, cars$speed, 5)
k_cluster = function(x, y, n, graphic = TRUE){
# Define distance function
distance = function(point1, point2){
a <- point1[1] - point2[1]
b <- point1[2] - point2[2]
ds <- (a ^ 2 + b ^ 2) ^ 0.5
return(ds)
}
# Setup pointset
pointset = cbind(x,y)
for(it in 1:100){
# Starting position of n points
start <- rep(0, 2 * n)
starting_points = matrix(data = start, nrow = n, ncol = 2)
#give initial value
d <- quantile(x, (i-0.5)/n)
e <- quantile(y, (i-0.5)/n)
for(i in 1:n){
starting_points[i,] = c(d, e)
}
value <- rep(0, dim(pointset)[1] * n)
dist_mat = matrix(data <- value, nrow = dim(pointset)[1], ncol = n)
for(i in 1:n){
dist_pi = vector()
for(j in 1:dim(pointset)[1]){
dist_pi = c(dist_pi, distance(pointset[j,], starting_points[i,]))
}
dist_mat[,i] = dist_pi
}
which_group = vector()
for(i in 1:dim(pointset)[1]){
which_group[i] = which.min(dist_mat[i,])
}
for(i in 1:n){
one_group = pointset[which_group == i,]
if(length(one_group) > 0){
starting_points[i,] = c(mean(one_group[,1]), mean(one_group[,2]))
}
}
}
plot(x, y, col = which_group + 1, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), pch = 16)
# Plot out centers
for(i in 1:n){
points(starting_points[i,1], starting_points[i,2], cex = 2.5, col = i + 1, pch = 8)
}
return(which_group)
}
k_cluster(cars$dist, cars$speed, 3)
k_cluster = function(x, y, n, graphic = TRUE){
# Define distance function
distance = function(point1, point2){
a <- point1[1] - point2[1]
b <- point1[2] - point2[2]
ds <- (a ^ 2 + b ^ 2) ^ 0.5
return(ds)
}
# Setup pointset
pointset = cbind(x,y)
for(it in 1:100){
# Starting position of n points
start <- rep(0, 2 * n)
starting_points = matrix(data = start, nrow = n, ncol = 2)
#give initial value
for(i in 1:n){
d <- quantile(x, (i-0.5)/n)
e <- quantile(y, (i-0.5)/n)
starting_points[i,] = c(d, e)
}
value <- rep(0, dim(pointset)[1] * n)
dist_mat = matrix(data <- value, nrow = dim(pointset)[1], ncol = n)
for(i in 1:n){
dist_pi = vector()
for(j in 1:dim(pointset)[1]){
dist_pi = c(dist_pi, distance(pointset[j,], starting_points[i,]))
}
dist_mat[,i] = dist_pi
}
which_group = vector()
for(i in 1:dim(pointset)[1]){
which_group[i] = which.min(dist_mat[i,])
}
for(i in 1:n){
one_group = pointset[which_group == i,]
if(length(one_group) > 0){
starting_points[i,] = c(mean(one_group[,1]), mean(one_group[,2]))
}
}
}
plot(x, y, col = which_group + 1, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), pch = 16)
# Plot out centers
for(i in 1:n){
points(starting_points[i,1], starting_points[i,2], cex = 2.5, col = i + 1, pch = 8)
}
return(which_group)
}
k_cluster(cars$dist, cars$speed, 3)
k_cluster(cars$dist, cars$speed, 3)
devtools::document()
rm(list = c("k_cluster", "SS"))
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
kmeans_cluster = function(x, y, n){
# Define distance function
distance = function(point1, point2){
return(((point1[1] - point2[1]) ^ 2 + (point1[2] - point2[2]) ^ 2)^ 0.5)
}
# Setup pointset
pointset = cbind(x,y)
for(it in 1:100){
# Starting position of two points
starting_points = matrix(data = rep(0, 2 * n), nrow = n, ncol = 2)
for(i in 1:n){
starting_points[i,] = c(quantile(x, (i-0.5)/n),quantile(y, (i-0.5)/n))
}
dist_mat = matrix(data = rep(0, dim(pointset)[1] * n), nrow = dim(pointset)[1], ncol = n)
for(i in 1:n){
dist_pi = vector()
for(j in 1:dim(pointset)[1]){
dist_pi = c(dist_pi, distance(pointset[j,], starting_points[i,]))
}
dist_mat[,i] = dist_pi
}
which_group = vector()
for(i in 1:dim(pointset)[1]){
which_group[i] = which.min(dist_mat[i,])
}
for(i in 1:n){
one_group = pointset[which_group == i,]
if(length(one_group) > 0){
starting_points[i,] = c(mean(one_group[,1]), mean(one_group[,2]))
}
}
}
plot(x, y, col = which_group + 1, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), pch = 16)
# Plot out centers
for(i in 1:n){
points(starting_points[i,1], starting_points[i,2], cex = 2.5, col = i + 1, pch = 8)
}
return(which_group)
}
kmeans_cluster(cars$dist, cars$speed, 5)
devtools::document()
devtools::check()
devtools::build_vignettes()
.Last.error.trace
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(microbenchmark)
dir_cpp <- 'E:/Statisticalcomputing/resources/'
sourceCpp(paste0(dir_cpp, "gibbsC.cpp"))
source(paste0(dir_cpp, "gibbsR.R"))
set.seed(12121)
gibbR<-gibbsR(100, 10)
gibbC<-gibbsC(100, 10)
qqplot(gibbR, gibbC)
ts <- microbenchmark(gibbC = gibbsC(100, 10), gibbR = gibbsR(100, 10))
summary(ts)[ ,c(1,3,5,6)]
knitr::opts_chunk$set(echo = TRUE)
#C++
cppFunction('NumericMatrix gibbsC(int N, int n,int a,int b) {
NumericMatrix mat(N, 2);
double x = 0, y = 0;
for(int i = 1; i < N; i++) {
y=mat(i-1,1);
mat(i,0)=rbinom(1, n, y)[0];
x=mat(i,0);
mat(i,1)=rbeta(1, x+a, n-x+b)[0];
}
return(mat);
}')
#pure R
set.seed(10101)
a <- 10101
b <- a+1
for (i in 1:9){
b = i+1
}
gibbsR_R <- function(N, n, a, b) {
mat <- matrix(nrow = N, ncol = 2)
mat[1,] <- c(0,0)
mat
for (i in 2:N) {
y <- mat[i-1,2]
mat[i,1] <- rbinom(1,n,y)
x <- mat[i,1]
mat[i,2]<-rbeta(1, x+a, n-x+b)
}
mat
}
devtools::build_vignettes()
library(Rcpp)
library(microbenchmark)
cppFunction('NumericMatrix gibbsC(int N, int n,int a,int b) {
NumericMatrix mat(N, 2);
double x = 0, y = 0;
for(int i = 1; i < N; i++) {
y=mat(i-1,1);
mat(i,0)=rbinom(1, n, y)[0];
x=mat(i,0);
mat(i,1)=rbeta(1, x+a, n-x+b)[0];
}
return(mat);
}')
#pure R
set.seed(10101)
a <- 10101
b <- a+1
for (i in 1:9){
b = i+1
}
gibbsR_R <- function(N, n, a, b) {
mat <- matrix(nrow = N, ncol = 2)
mat[1,] <- c(0,0)
mat
for (i in 2:N) {
y <- mat[i-1,2]
mat[i,1] <- rbinom(1,n,y)
x <- mat[i,1]
mat[i,2]<-rbeta(1, x+a, n-x+b)
}
mat
}
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
rm(list = c("gibbsC"))
devtools::document()
devtools::check()
devtools::build_vignettes()
set.seed(10101)
rw.Metropolis <- function(mu,lambda,sigma,x0,N){
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1,x[i-1],sigma)
#用dcauchy来计算cauchy分布在给定点处的密度函数值
if(u[i] <= (dcauchy(y,mu,lambda)/dcauchy(x[i-1], mu, lambda)))
x[i] <- y
else{
x[i] <- x[i-1]
k <- k+1
}
}
return(list(x=x,k=k))
}
#给柯西分布的参数、提议分布的方差以及初始值x0赋值
mu <- 0; lambda <- 1
N <- 4000
sigma <- c(0.05,0.5,1,16)
x0 <- 15
#生成不同方差下的四个链
rw1 <- rw.Metropolis(mu,lambda, sigma[1], x0, N)
rw2 <- rw.Metropolis(mu,lambda, sigma[2], x0, N)
rw3 <- rw.Metropolis(mu,lambda, sigma[3], x0, N)
rw4 <- rw.Metropolis(mu,lambda, sigma[4], x0, N)
#计算每个链中待选点的拒绝率
print(c(rw1$k,rw2$k,rw3$k,rw4$k)/N)
#绘制四个链的轨迹图
par(mfrow = c(2,2))
refline <- qcauchy(c(.025,.975), mu, lambda)
rw <- cbind(rw1$x,rw2$x,rw3$x,rw4$x)
for (j in 1:4) {
plot(rw[,j],type='l',xlab=bquote(sigma==.(round(sigma[j],3))),
ylab='X',ylim=range(rw[,j]))
abline(h=refline)
}
par(mfrow=c(1,1))
#丢弃链的前1000个值
rw_new1 <- rw1$x[1001:4000]
rw_new2 <- rw2$x[1001:4000]
rw_new3 <- rw3$x[1001:4000]
rw_new4 <- rw4$x[1001:4000]
#计算理论及丢弃前1000个值后的四组链值的十分位数
probs <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
df <- qcauchy(probs,mu,lambda)
df1 <- quantile(rw_new1,probs)
df2 <- quantile(rw_new2,probs)
df3 <- quantile(rw_new3,probs)
df4 <- quantile(rw_new4,probs)
#绘制理论十分位数折线及四个链的十分位数点
plot(df~probs, pch = 21, col="black",xlab = "分位数",
xlim = c(0.1,0.9), ylab="十分位数值", ylim = c(-5,5),
main="理论及四组链值的十分位数折线图",type = "l")
points(probs, df1, pch= 22, col="blue", cex=1)
points(probs, df2, pch= 23, col="red", cex=1)
points(probs, df3, pch= 24, col="pink", cex=1)
points(probs, df4, pch= 25, col="green", cex=1)
legend("topleft", inset=.05, c("理论","方差0.05","方差0.5","方差1","方差16"),
col=c("black","blue","red","pink","green"),
text.col=c("black","blue","red","pink","green"),
pch=c(21,22,23,24,25))
#initialize constants
set.seed(10101)
N <- 4000 #length of chain
burn_period <- 1000 #burn-in length
X <- matrix(0, N, 2) #the chain, a bivariate sample
x <- y <- numeric(N)
#initialize the parameters
a <- 100
b <- 100
n <- 1000
#initialize the variate's value
X[1, 1] <- 100
X[1, 2] <- 0.5
#generate the chain
for (i in 2:N){
x[i] <- X[i-1, 1]
y[i] <- X[i-1, 2]
X[i, 1] <- rbinom(1, n, y[i])
X[i, 2] <- rbeta(1, x[i]+a, n-x[i]+b)
}
b <- burn_period + 1
m <- X[b:N,]
plot(m, main="", cex=.4, xlab="X",
ylab="Y", xlim=range(m[,1]), ylim=range(m[,2]))
set.seed(10101)
Gelman.Rubin <- function(psi) {
# psi[i,j] is the statistic psi(X[i,1:j])
# for chain in i-th row of X
psi <- as.matrix(psi)
n <- ncol(psi)
k <- nrow(psi)
psi.means <- rowMeans(psi) #row means
B <- n * var(psi.means) #between variance est.
psi.w <- apply(psi, 1, "var") #within variances
W <- mean(psi.w) #within est.
v.hat <- W*(n-1)/n + (B/n) #upper variance est.
r.hat <- v.hat / W #G-R statistic
return(r.hat)
}
normal.chain <- function(mu, lambda, sigma, N, X1) {
#generates a Metropolis chain for Normal(0,1)
#with Normal(X[t], sigma) proposal distribution
#and starting value X1
x <- numeric(N)
x[1] <- X1
u <- runif(N)
for (i in 2:N) {
y <- rnorm(1,x[i-1],sigma)
#用dcauchy来计算cauchy分布在给定点处的密度函数值
if(u[i] <= (dcauchy(y,mu,lambda)/dcauchy(x[i-1], mu, lambda)))
x[i] <- y
else{
x[i] <- x[i-1]
}
}
return(x)
}
mu <- 0      #parameter of cauchy distribution
lambda <- .01  #parameter of cauchy distribution
sigma <- 1   #parameter of proposal distribution
k <- 4       #number of chains to generate
n <- 20000   #length of chains
b <- 2000    #burn-in length
#choose overdispersed initial values
x0 <- c(-5, 0, 10, 25)
#generate the chains
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k)
X[i, ] <- normal.chain(mu, lambda, sigma, n, x0[i])
#compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi))
psi[i,] <- psi[i,] / (1:ncol(psi))
print(Gelman.Rubin(psi))
#plot psi for the four chains
par(mfrow=c(2,2))
for (i in 1:k)
plot(psi[i, (b+1):n], type="l", xlab=i, ylab=bquote(psi))
par(mfrow=c(1,1)) #restore default
#plot the sequence of R-hat statistics
rhat <- rep(0, n)
for (j in (b+1):n)
rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
#give the line of R_hat = 1.2
abline(h=1.2, lty=2)
set.seed(10101)
rw.Metropolis <- function(mu,lambda,sigma,x0,N){
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1,x[i-1],sigma)
#用dcauchy来计算cauchy分布在给定点处的密度函数值
if(u[i] <= (dcauchy(y,mu,lambda)/dcauchy(x[i-1], mu, lambda)))
x[i] <- y
else{
x[i] <- x[i-1]
k <- k+1
}
}
return(list(x=x,k=k))
}
#给柯西分布的参数、提议分布的方差以及初始值x0赋值
mu <- 0; lambda <- 1
N <- 4000
sigma <- c(0.05,0.5,1,16)
x0 <- 15
#生成不同方差下的四个链
rw1 <- rw.Metropolis(mu,lambda, sigma[1], x0, N)
rw2 <- rw.Metropolis(mu,lambda, sigma[2], x0, N)
rw3 <- rw.Metropolis(mu,lambda, sigma[3], x0, N)
rw4 <- rw.Metropolis(mu,lambda, sigma[4], x0, N)
#计算每个链中待选点的拒绝率
print(c(rw1$k,rw2$k,rw3$k,rw4$k)/N)
#绘制四个链的轨迹图
#par(mfrow = c(2,2))
refline <- qcauchy(c(.025,.975), mu, lambda)
rw <- cbind(rw1$x,rw2$x,rw3$x,rw4$x)
for (j in 1:4) {
plot(rw[,j],type='l',xlab=bquote(sigma==.(round(sigma[j],3))),
ylab='X',ylim=range(rw[,j]))
abline(h=refline)
}
par(mfrow=c(1,1))
#丢弃链的前1000个值
rw_new1 <- rw1$x[1001:4000]
rw_new2 <- rw2$x[1001:4000]
rw_new3 <- rw3$x[1001:4000]
rw_new4 <- rw4$x[1001:4000]
#计算理论及丢弃前1000个值后的四组链值的十分位数
probs <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
df <- qcauchy(probs,mu,lambda)
df1 <- quantile(rw_new1,probs)
df2 <- quantile(rw_new2,probs)
df3 <- quantile(rw_new3,probs)
df4 <- quantile(rw_new4,probs)
#绘制理论十分位数折线及四个链的十分位数点
plot(df~probs, pch = 21, col="black",xlab = "分位数",
xlim = c(0.1,0.9), ylab="十分位数值", ylim = c(-5,5),
main="理论及四组链值的十分位数折线图",type = "l")
points(probs, df1, pch= 22, col="blue", cex=1)
points(probs, df2, pch= 23, col="red", cex=1)
points(probs, df3, pch= 24, col="pink", cex=1)
points(probs, df4, pch= 25, col="green", cex=1)
legend("topleft", inset=.05, c("理论","方差0.05","方差0.5","方差1","方差16"),
col=c("black","blue","red","pink","green"),
text.col=c("black","blue","red","pink","green"),
pch=c(21,22,23,24,25))
devtools::build_vignettes()
devtools::build(vignettes = FALSE)
install.packages("E:/Statisticalcomputing/homework/Final/StatComp21041_1.0.tar.gz",repo=NULL)
library(StatComp21041)
remove.packages("StatComp21041")
devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
